// /api/chatkit-session â€” Vercel Edge Function
export const config = { runtime: "edge" };

function json(obj: unknown, status = 200) {
  return new Response(JSON.stringify(obj), {
    status,
    headers: {
      "content-type": "application/json; charset=utf-8",
      "access-control-allow-origin": "*",
    },
  });
}

export default async function handler(req: Request) {
  const method = req.method || "GET";

  // CORS preflight
  if (method === "OPTIONS") {
    return new Response(null, {
      status: 204,
      headers: {
        "access-control-allow-origin": "*",
        "access-control-allow-methods": "POST, GET, OPTIONS",
        "access-control-allow-headers": "content-type, authorization",
        "access-control-max-age": "86400",
      },
    });
  }

  if (method === "GET") {
    return json({ ok: true, message: "chatkit-session is live. use POST." });
  }
  if (method !== "POST") return json({ error: "Method not allowed" }, 405);

  const apiKey = process.env.OPENAI_API_KEY;
  const workflowId = process.env.WORKFLOW_ID; // set this in Vercel
  if (!apiKey || !workflowId) {
    return json({ error: "Missing OPENAI_API_KEY or WORKFLOW_ID" }, 500);
  }

  // Optionally accept per-user context from the client
  let body: any = {};
  try { body = await req.json(); } catch {}
  const { user, variables } = body || {};

  const r = await fetch("https://api.openai.com/v1/chatkit/sessions", {
    method: "POST",
    headers: {
      "authorization": `Bearer ${apiKey}`,
      "content-type": "application/json",
    },
    body: JSON.stringify({
      workflow_id: workflowId,
      ...(user ? { user } : {}),
      ...(variables ? { variables } : {}),
    }),
    signal: AbortSignal.timeout ? AbortSignal.timeout(30_000) : undefined,
  });

  const text = await r.text();
  let data: any = null; try { data = text ? JSON.parse(text) : null; } catch {}

  if (!r.ok) {
    const detail = data?.error?.message || text || `HTTP ${r.status}`;
    return json({ error: `ChatKit session error: ${detail}` }, 502);
  }

  // The client will use data.client_secret to initialise the ChatKit UI
  return json(data, 200);
}

